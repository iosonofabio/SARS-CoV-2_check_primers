# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _seqanpy
else:
    import _seqanpy

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



def nothing():
    r"""nothing() -> int"""
    return _seqanpy.nothing()

def align_global(seq1, seq2, band=100, score_match=3, score_mismatch=-3, score_gapext=-1, score_gapopen=-5):
    r"""
    align_global(seq1, seq2, band=100, score_match=3, score_mismatch=-3, score_gapext=-1, score_gapopen=-5) -> int
    Global alignment of two sequences.

    Parameters:
       seq1: string with the first seq
       seq2: string with the second seq
       band: make banded alignment, maximal shear between the sequences (-1 to turn off)
       score_match: score for every match
       score_mismatch: score for every mismatch (usually a negative number)
       score_gapext: score for extending a gap (usually a negative number)
       score_gapopen: score for opening a gap (usually a negative number)

    """

    seq1 = ''.join(seq1)
    seq2 = ''.join(seq2)


    return _seqanpy.align_global(seq1, seq2, band, score_match, score_mismatch, score_gapext, score_gapopen)

def align_overlap(seq1, seq2, band=-1, score_match=3, score_mismatch=-3, score_gapext=-1, score_gapopen=-5, cut_flanks=0):
    r"""
    align_overlap(seq1, seq2, band=-1, score_match=3, score_mismatch=-3, score_gapext=-1, score_gapopen=-5, cut_flanks=0) -> int
    Align a subsequence onto a longer, reference one.

    Parameters:
       seq1: string with the reference seq
       seq2: string with the subsequence (end gaps are free)
       band: make banded alignment, maximal shear between the sequences (-1 to turn off)
       score_match: score for every match
       score_mismatch: score for every mismatch (usually a negative number)
       score_gapext: score for extending a gap (usually a negative number)
       score_gapopen: score for opening a gap (usually a negative number)

    Note: band counts also gaps at the edges, so it must be used with care.

    """

    seq1 = ''.join(seq1)
    seq2 = ''.join(seq2)


    val = _seqanpy.align_overlap(seq1, seq2, band, score_match, score_mismatch, score_gapext, score_gapopen, cut_flanks)

        # The C++ function returs a variable called val
    if cut_flanks:
        s, ali1, ali2 = val
        ali_start = len(ali2) - len(ali2.lstrip('-'))
        ali_end = len(ali2.rstrip('-'))
        ali1 = ali1[ali_start: ali_end]
        ali2 = ali2[ali_start: ali_end]
        val = (s, ali1, ali2)


    return val

def align_ladder(seq1, seq2, band=-1, score_match=3, score_mismatch=-3, score_gapext=-1, score_gapopen=-5):
    r"""
    align_ladder(seq1, seq2, band=-1, score_match=3, score_mismatch=-3, score_gapext=-1, score_gapopen=-5) -> int
    Align two sequences where the second is an overlapping extension of the first.

    Parameters:
       seq1: string to be extended (end gaps are free)
       seq2: string to use for extension (start gaps are free)
       band: make banded alignment, maximal shear between the sequences (-1 to turn off)
       score_match: score for every match
       score_mismatch: score for every mismatch (usually a negative number)
       score_gapext: score for extending a gap (usually a negative number)
       score_gapopen: score for opening a gap (usually a negative number)

    Note: band counts also gaps at the edges, so it must be used with care.

    """

    seq1 = ''.join(seq1)
    seq2 = ''.join(seq2)


    return _seqanpy.align_ladder(seq1, seq2, band, score_match, score_mismatch, score_gapext, score_gapopen)

def align_local(seq1, seq2, score_match=3, score_mismatch=-3, score_gapext=-1, score_gapopen=-5):
    r"""
    align_local(seq1, seq2, score_match=3, score_mismatch=-3, score_gapext=-1, score_gapopen=-5) -> int
    Local alignment of two strings.

    Parameters:
       seq1: string with the first seq
       seq2: string with the second seq
       score_match: score for every match
       score_mismatch: score for every mismatch (usually a negative number)
       score_gapext: score for extending a gap (usually a negative number)
       score_gapopen: score for opening a gap (usually a negative number)

    """

    seq1 = ''.join(seq1)
    seq2 = ''.join(seq2)


    return _seqanpy.align_local(seq1, seq2, score_match, score_mismatch, score_gapext, score_gapopen)


